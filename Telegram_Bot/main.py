from aiogram import Bot, Dispatcher, executor, types
import os
import tempfile
import torchaudio
import requests
import torch
import opuspy
import numpy as np



bot = Bot(token='6294998264:AAGGTSpHfFGabeZGafEB8PxmEMi2uC4t7kU')
dp = Dispatcher(bot)

chars = {"mage":"–í–æ–ª—à–µ–±–Ω–∏–∫","jedi":"–î–∂–µ–¥–∞–π","capybara":"üòé–ö–∞–ø–∏–±–∞—Ä–∞üòé"}

@dp.message_handler(commands=['start','change_person','cp','cc','change_char','change_character'])
async def char_change(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–í–æ–ª—à–µ–±–Ω–∏–∫", callback_data="char_mage"))
    keyboard.add(types.InlineKeyboardButton(text="–î–∂–µ–¥–∞–π", callback_data="char_jedi"))
    keyboard.add(types.InlineKeyboardButton(text="üòé–ö–∞–ø–∏–±–∞—Ä–∞üòé", callback_data="char_capybara"))
    await message.answer('–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è', reply_markup=keyboard)

@dp.message_handler(commands=['change_mood','cm'])
async def mood_change(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ì—Ä—É—Å—Ç—å", callback_data="mood_–≥—Ä—É—Å—Ç—å"))
    keyboard.add(types.InlineKeyboardButton(text="–†–∞–¥–æ—Å—Ç—å", callback_data="mood_—Ä–∞–¥–æ—Å—Ç—å"))
    keyboard.add(types.InlineKeyboardButton(text="–ó–ª–æ—Å—Ç—å", callback_data="mood_–∑–ª–æ—Å—Ç—å"))
    keyboard.add(types.InlineKeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", callback_data="mood_–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ 1", callback_data="help_1"))
    keyboard.add(types.InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ 2", callback_data="help_2"))
    await message.answer('–¢—É—Ç –±—É–¥–µ—Ç –ø–æ–º–æ—â—å.', reply_markup=keyboard)

@dp.message_handler(content_types=[types.ContentType.VOICE])
async def voice_message_handler(message: types.Message):
    await message.answer_chat_action(types.ChatActions.RECORD_AUDIO)
    with tempfile.NamedTemporaryFile(suffix=".wav") as temp_file:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(file_path)
        print(temp_file.name)
        await bot.download_file(file_path, temp_file.name)
        audio, s_r = torchaudio.load(temp_file)
    request_disp = {"user_id": 111, "audio": audio.tolist(), "sample_rate": s_r, "personage": "wiki"}
    tts_answer = requests.post("http://127.0.0.1:5001/query", json=request_disp)
    with tempfile.NamedTemporaryFile(suffix=".wav") as temp_file:
        voice = torch.tensor(tts_answer.json()["audio"]).unsqueeze(0)
        print(voice.shape)
        torchaudio.save(temp_file.name, voice, 48000)
        await message.answer_voice(voice=types.InputFile(temp_file.name, "r"))

@dp.callback_query_handler(text_startswith="char")
async def char_changed(call: types.CallbackQuery):
    char_id = call.data.split("_")[1]
    character = chars[char_id]
    await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character}")
    await call.answer()

@dp.callback_query_handler(text_startswith="mood")
async def mood_changed(call: types.CallbackQuery):
    mood = call.data.split("_")[1]
    await call.message.edit_text(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ "{mood}"')
    await call.answer()

@dp.callback_query_handler(text_startswith="help")
async def mood_changed(call: types.CallbackQuery):
    num = call.data.split("_")[1]
    await call.message.edit_text(f'–î–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ë–æ–≥ –Ω–æ–º–µ—Ä {num}')
    await call.answer()

@dp.message_handler(commands=['end'])
async def char_change(message: types.Message):
    await message.answer('–í—Å–µ. –≠—Ç–æ –∫–æ–Ω–µ—Ü. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)